import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import {
  ChevronLeft,
  ChevronRight,
  CreditCard,
  Download,
  Filter,
  MapPin,
  Search,
  ShoppingBag,
  Timer,
} from "lucide-react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

export default function AlertsPage() {
  // Mock alerts data
  const alerts = [
    {
      id: "ALT-7291",
      title: "Multiple high-value transactions",
      description: "5 transactions over $1,000 in 30 minutes",
      transactionId: "TRX-4828",
      cardLast4: "7865",
      timestamp: "Mar 5, 2025 13:45:12",
      severity: "critical",
      type: "frequency",
      status: "open",
    },
    {
      id: "ALT-7290",
      title: "Transaction from unusual location",
      description: "Transaction from Nigeria, first time for this card",
      transactionId: "TRX-4825",
      cardLast4: "2109",
      timestamp: "Mar 5, 2025 10:05:17",
      severity: "high",
      type: "location",
      status: "open",
    },
    {
      id: "ALT-7289",
      title: "Unusual merchant category",
      description: "First transaction with cryptocurrency exchange",
      transactionId: "TRX-4822",
      cardLast4: "3210",
      timestamp: "Mar 4, 2025 23:15:10",
      severity: "medium",
      type: "merchant",
      status: "investigating",
    },
    {
      id: "ALT-7288",
      title: "Unusual transaction amount",
      description: "Transaction amount 500% higher than average",
      transactionId: "TRX-4820",
      cardLast4: "5678",
      timestamp: "Mar 4, 2025 18:30:45",
      severity: "high",
      type: "amount",
      status: "investigating",
    },
    {
      id: "ALT-7287",
      title: "Card testing pattern detected",
      description: "Multiple small transactions in quick succession",
      transactionId: "Multiple",
      cardLast4: "9012",
      timestamp: "Mar 4, 2025 15:20:33",
      severity: "high",
      type: "frequency",
      status: "resolved",
    },
    {
      id: "ALT-7286",
      title: "Transaction from blacklisted IP",
      description: "IP address associated with previous fraud",
      transactionId: "TRX-4815",
      cardLast4: "4321",
      timestamp: "Mar 4, 2025 12:10:05",
      severity: "critical",
      type: "location",
      status: "resolved",
    },
  ]

  // Severity badge colors
  const severityColors = {
    low: "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400",
    medium: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400",
    high: "bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-400",
    critical: "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400",
  }

  // Status badge colors
  const statusColors = {
    open: "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400",
    investigating: "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400",
    resolved: "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400",
  }

  // Alert type icons
  const alertTypeIcons = {
    location: <MapPin className="h-4 w-4" />,
    amount: <CreditCard className="h-4 w-4" />,
    frequency: <Timer className="h-4 w-4" />,
    merchant: <ShoppingBag className="h-4 w-4" />,
  }

  return (
    <div className="flex flex-col gap-6">
      <div className="flex flex-col gap-2">
        <h1 className="text-3xl font-bold tracking-tight">Fraud Alerts</h1>
        <p className="text-muted-foreground">Monitor and manage fraud alerts generated by the system</p>
      </div>

      <Tabs defaultValue="all" className="space-y-4">
        <div className="flex justify-between items-center">
          <TabsList>
            <TabsTrigger value="all">All Alerts</TabsTrigger>
            <TabsTrigger value="open">Open</TabsTrigger>
            <TabsTrigger value="investigating">Investigating</TabsTrigger>
            <TabsTrigger value="resolved">Resolved</TabsTrigger>
          </TabsList>

          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" className="hidden md:flex items-center gap-2">
              <Filter className="h-4 w-4" />
              Filter
            </Button>
            <Button variant="outline" size="sm" className="hidden md:flex items-center gap-2">
              <Download className="h-4 w-4" />
              Export
            </Button>
          </div>
        </div>

        <div className="flex items-center gap-2">
          <div className="relative flex-1">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input type="search" placeholder="Search alerts..." className="pl-8 w-full" />
          </div>

          <Select defaultValue="all-severity">
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Severity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all-severity">All Severities</SelectItem>
              <SelectItem value="critical">Critical</SelectItem>
              <SelectItem value="high">High</SelectItem>
              <SelectItem value="medium">Medium</SelectItem>
              <SelectItem value="low">Low</SelectItem>
            </SelectContent>
          </Select>

          <Select defaultValue="all-types">
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Alert Type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all-types">All Types</SelectItem>
              <SelectItem value="location">Location</SelectItem>
              <SelectItem value="amount">Amount</SelectItem>
              <SelectItem value="frequency">Frequency</SelectItem>
              <SelectItem value="merchant">Merchant</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <TabsContent value="all" className="space-y-4">
          {alerts.map((alert) => (
            <Card key={alert.id} className="overflow-hidden">
              <div
                className={`h-1 ${
                  alert.severity === "critical"
                    ? "bg-red-500"
                    : alert.severity === "high"
                      ? "bg-orange-500"
                      : alert.severity === "medium"
                        ? "bg-yellow-500"
                        : "bg-blue-500"
                }`}
              />
              <CardHeader className="pb-2">
                <div className="flex justify-between items-start">
                  <div className="flex items-center gap-2">
                    <div className="bg-muted p-1.5 rounded-md">
                      {alertTypeIcons[alert.type as keyof typeof alertTypeIcons]}
                    </div>
                    <CardTitle className="text-lg">{alert.title}</CardTitle>
                  </div>
                  <div className="flex gap-2">
                    <Badge variant="outline" className={severityColors[alert.severity as keyof typeof severityColors]}>
                      {alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}
                    </Badge>
                    <Badge variant="outline" className={statusColors[alert.status as keyof typeof statusColors]}>
                      {alert.status.charAt(0).toUpperCase() + alert.status.slice(1)}
                    </Badge>
                  </div>
                </div>
                <CardDescription className="mt-1">{alert.description}</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-x-6 gap-y-2 text-sm">
                  <div className="flex items-center gap-2">
                    <span className="text-muted-foreground">Alert ID:</span>
                    <span className="font-medium">{alert.id}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-muted-foreground">Transaction:</span>
                    <span className="font-medium">{alert.transactionId}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-muted-foreground">Card:</span>
                    <span className="font-medium">•••• {alert.cardLast4}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-muted-foreground">Time:</span>
                    <span className="font-medium">{alert.timestamp}</span>
                  </div>
                </div>

                <div className="flex gap-2 mt-4">
                  <Button size="sm">View Details</Button>
                  {alert.status !== "resolved" && (
                    <>
                      <Button size="sm" variant="outline">
                        Mark as Resolved
                      </Button>
                      <Button size="sm" variant="destructive">
                        Block Card
                      </Button>
                    </>
                  )}
                </div>
              </CardContent>
            </Card>
          ))}

          <div className="flex items-center justify-between">
            <div className="text-sm text-muted-foreground">
              Showing <strong>1</strong> to <strong>6</strong> of <strong>24</strong> alerts
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="icon">
                <ChevronLeft className="h-4 w-4" />
              </Button>
              <Button variant="outline" size="icon">
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="open" className="space-y-4">
          {alerts
            .filter((alert) => alert.status === "open")
            .map((alert) => (
              <Card key={alert.id} className="overflow-hidden">
                <div
                  className={`h-1 ${
                    alert.severity === "critical"
                      ? "bg-red-500"
                      : alert.severity === "high"
                        ? "bg-orange-500"
                        : alert.severity === "medium"
                          ? "bg-yellow-500"
                          : "bg-blue-500"
                  }`}
                />
                <CardHeader className="pb-2">
                  <div className="flex justify-between items-start">
                    <div className="flex items-center gap-2">
                      <div className="bg-muted p-1.5 rounded-md">
                        {alertTypeIcons[alert.type as keyof typeof alertTypeIcons]}
                      </div>
                      <CardTitle className="text-lg">{alert.title}</CardTitle>
                    </div>
                    <div className="flex gap-2">
                      <Badge
                        variant="outline"
                        className={severityColors[alert.severity as keyof typeof severityColors]}
                      >
                        {alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}
                      </Badge>
                      <Badge variant="outline" className={statusColors[alert.status as keyof typeof statusColors]}>
                        {alert.status.charAt(0).toUpperCase() + alert.status.slice(1)}
                      </Badge>
                    </div>
                  </div>
                  <CardDescription className="mt-1">{alert.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-x-6 gap-y-2 text-sm">
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Alert ID:</span>
                      <span className="font-medium">{alert.id}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Transaction:</span>
                      <span className="font-medium">{alert.transactionId}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Card:</span>
                      <span className="font-medium">•••• {alert.cardLast4}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Time:</span>
                      <span className="font-medium">{alert.timestamp}</span>
                    </div>
                  </div>

                  <div className="flex gap-2 mt-4">
                    <Button size="sm">View Details</Button>
                    <Button size="sm" variant="outline">
                      Mark as Resolved
                    </Button>
                    <Button size="sm" variant="destructive">
                      Block Card
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
        </TabsContent>

        <TabsContent value="investigating" className="space-y-4">
          {alerts
            .filter((alert) => alert.status === "investigating")
            .map((alert) => (
              <Card key={alert.id} className="overflow-hidden">
                <div
                  className={`h-1 ${
                    alert.severity === "critical"
                      ? "bg-red-500"
                      : alert.severity === "high"
                        ? "bg-orange-500"
                        : alert.severity === "medium"
                          ? "bg-yellow-500"
                          : "bg-blue-500"
                  }`}
                />
                <CardHeader className="pb-2">
                  <div className="flex justify-between items-start">
                    <div className="flex items-center gap-2">
                      <div className="bg-muted p-1.5 rounded-md">
                        {alertTypeIcons[alert.type as keyof typeof alertTypeIcons]}
                      </div>
                      <CardTitle className="text-lg">{alert.title}</CardTitle>
                    </div>
                    <div className="flex gap-2">
                      <Badge
                        variant="outline"
                        className={severityColors[alert.severity as keyof typeof severityColors]}
                      >
                        {alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}
                      </Badge>
                      <Badge variant="outline" className={statusColors[alert.status as keyof typeof statusColors]}>
                        {alert.status.charAt(0).toUpperCase() + alert.status.slice(1)}
                      </Badge>
                    </div>
                  </div>
                  <CardDescription className="mt-1">{alert.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-x-6 gap-y-2 text-sm">
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Alert ID:</span>
                      <span className="font-medium">{alert.id}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Transaction:</span>
                      <span className="font-medium">{alert.transactionId}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Card:</span>
                      <span className="font-medium">•••• {alert.cardLast4}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Time:</span>
                      <span className="font-medium">{alert.timestamp}</span>
                    </div>
                  </div>

                  <div className="flex gap-2 mt-4">
                    <Button size="sm">View Details</Button>
                    <Button size="sm" variant="outline">
                      Mark as Resolved
                    </Button>
                    <Button size="sm" variant="destructive">
                      Block Card
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
        </TabsContent>

        <TabsContent value="resolved" className="space-y-4">
          {alerts
            .filter((alert) => alert.status === "resolved")
            .map((alert) => (
              <Card key={alert.id} className="overflow-hidden">
                <div
                  className={`h-1 ${
                    alert.severity === "critical"
                      ? "bg-red-500"
                      : alert.severity === "high"
                        ? "bg-orange-500"
                        : alert.severity === "medium"
                          ? "bg-yellow-500"
                          : "bg-blue-500"
                  }`}
                />
                <CardHeader className="pb-2">
                  <div className="flex justify-between items-start">
                    <div className="flex items-center gap-2">
                      <div className="bg-muted p-1.5 rounded-md">
                        {alertTypeIcons[alert.type as keyof typeof alertTypeIcons]}
                      </div>
                      <CardTitle className="text-lg">{alert.title}</CardTitle>
                    </div>
                    <div className="flex gap-2">
                      <Badge
                        variant="outline"
                        className={severityColors[alert.severity as keyof typeof severityColors]}
                      >
                        {alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}
                      </Badge>
                      <Badge variant="outline" className={statusColors[alert.status as keyof typeof statusColors]}>
                        {alert.status.charAt(0).toUpperCase() + alert.status.slice(1)}
                      </Badge>
                    </div>
                  </div>
                  <CardDescription className="mt-1">{alert.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-x-6 gap-y-2 text-sm">
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Alert ID:</span>
                      <span className="font-medium">{alert.id}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Transaction:</span>
                      <span className="font-medium">{alert.transactionId}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Card:</span>
                      <span className="font-medium">•••• {alert.cardLast4}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-muted-foreground">Time:</span>
                      <span className="font-medium">{alert.timestamp}</span>
                    </div>
                  </div>

                  <div className="flex gap-2 mt-4">
                    <Button size="sm">View Details</Button>
                    <Button size="sm" variant="outline">
                      Reopen
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
        </TabsContent>
      </Tabs>
    </div>
  )
}

